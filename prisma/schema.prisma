generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          String    // "leader" or "worker"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  assignedTasks Task[]    @relation("WorkerTasks")
  createdTasks  Task[]    @relation("LeaderTasks")
  sentMessages  Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  notifications Notification[]
  comments      TaskComment[]
  accounts      Account[]
  sessions      Session[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String
  deadline    DateTime
  status      String    // "pending", "in_progress", "completed", "rejected"
  leaderId    String
  workerId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  leader      User      @relation("LeaderTasks", fields: [leaderId], references: [id])
  worker      User      @relation("WorkerTasks", fields: [workerId], references: [id])
  evidence    Evidence[]
  comments    TaskComment[]
}

model Evidence {
  id          String    @id @default(cuid())
  taskId      String
  fileUrl     String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  message     String
  read        Boolean   @default(false)
  type        String    // "task_assigned", "task_completed", etc.
  relatedId   String?   // Could be taskId or other
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id          String    @id @default(cuid())
  senderId    String
  receiverId  String
  content     String
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())

  // Relations
  sender      User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User      @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model TaskComment {
  id          String    @id @default(cuid())
  taskId      String
  userId      String
  content     String
  createdAt   DateTime  @default(now())

  // Relations
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

